import { 
    getAuth, 
    onAuthStateChanged, 
    updateProfile,
    updatePassword,
    reauthenticateWithCredential,
    EmailAuthProvider,
    deleteUser,
    sendPasswordResetEmail
} from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-auth.js';
import { 
    getFirestore, 
    doc, 
    getDoc, 
    setDoc, 
    updateDoc,
    deleteDoc,
    collection,
    serverTimestamp
} from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-firestore.js';
import { 
    getStorage, 
    ref, 
    uploadBytesResumable,
    getDownloadURL,
    deleteObject 
} from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-storage.js';
import { app, auth as firebaseAuth, db as firebaseDB, storage as firebaseStorage } from './config/firebase-config.js';

// Inicializar Firebase
const auth = firebaseAuth;
const db = firebaseDB;
const storage = firebaseStorage;

let currentUser = null;

// Datos de comunas por regi√≥n
const comunasPorRegion = {
    "Arica y Parinacota": ["Arica", "Camarones", "Putre", "General Lagos"],
    "Tarapac√°": ["Alto Hospicio", "Iquique", "Cami√±a", "Colchane", "Huara", "Pica", "Pozo Almonte"],
    "Antofagasta": ["Antofagasta", "Mejillones", "Sierra Gorda", "Taltal", "Calama", "Ollag√ºe", "San Pedro de Atacama", "Tocopilla", "Mar√≠a Elena"],
    "Atacama": ["Copiap√≥", "Caldera", "Tierra Amarilla", "Cha√±aral", "Diego de Almagro", "Vallenar", "Alto del Carmen", "Freirina", "Huasco"],
    "Coquimbo": ["La Serena", "Coquimbo", "Andacollo", "La Higuera", "Paihuano", "Vicu√±a", "Illapel", "Canela", "Los Vilos", "Salamanca", "Ovalle", "Combarbal√°", "Monte Patria", "Punitaqui", "R√≠o Hurtado"],
    "Valpara√≠so": ["Valpara√≠so", "Casablanca", "Conc√≥n", "Juan Fern√°ndez", "Puchuncav√≠", "Quintero", "Vi√±a del Mar", "Isla de Pascua", "Los Andes", "Calle Larga", "Rinconada", "San Esteban", "La Ligua", "Cabildo", "Papudo", "Petorca", "Zapallar", "Quillota", "Calera", "Hijuelas", "La Cruz", "Nogales", "San Antonio", "Algarrobo", "Cartagena", "El Quisco", "El Tabo", "Santo Domingo", "San Felipe", "Catemu", "Llaillay", "Panquehue", "Putaendo", "Santa Mar√≠a", "Quilpu√©", "Limache", "Olmu√©", "Villa Alemana"],
    "Metropolitana": ["Cerrillos", "Cerro Navia", "Conchal√≠", "El Bosque", "Estaci√≥n Central", "Huechuraba", "Independencia", "La Cisterna", "La Florida", "La Granja", "La Pintana", "La Reina", "Las Condes", "Lo Barnechea", "Lo Espejo", "Lo Prado", "Macul", "Maip√∫", "√ëu√±oa", "Pedro Aguirre Cerda", "Pe√±alol√©n", "Providencia", "Pudahuel", "Quilicura", "Quinta Normal", "Recoleta", "Renca", "San Joaqu√≠n", "San Miguel", "San Ram√≥n", "Santiago", "Vitacura", "Puente Alto", "Pirque", "San Jos√© de Maipo", "Colina", "Lampa", "Tiltil", "San Bernardo", "Buin", "Calera de Tango", "Paine", "Melipilla", "Alhu√©", "Curacav√≠", "Mar√≠a Pinto", "San Pedro", "Talagante", "El Monte", "Isla de Maipo", "Padre Hurtado", "Pe√±aflor"],
    "O'Higgins": ["Rancagua", "Codegua", "Coinco", "Coltauco", "Do√±ihue", "Graneros", "Las Cabras", "Machal√≠", "Malloa", "Mostazal", "Olivar", "Peumo", "Pichidegua", "Quinta de Tilcoco", "Rengo", "Requ√≠noa", "San Vicente", "Pichilemu", "La Estrella", "Litueche", "Marchihue", "Navidad", "Paredones", "San Fernando", "Ch√©pica", "Chimbarongo", "Lolol", "Nancagua", "Palmilla", "Peralillo", "Placilla", "Pumanque", "Santa Cruz"],
    "Maule": ["Talca", "Constituci√≥n", "Curepto", "Empedrado", "Maule", "Pelarco", "Pencahue", "R√≠o Claro", "San Clemente", "San Rafael", "Cauquenes", "Chanco", "Pelluhue", "Curic√≥", "Huala√±√©", "Licant√©n", "Molina", "Rauco", "Romeral", "Sagrada Familia", "Teno", "Vichuqu√©n", "Linares", "Colb√∫n", "Longav√≠", "Parral", "Retiro", "San Javier", "Villa Alegre", "Yerbas Buenas"],
    "√ëuble": ["Chill√°n", "Bulnes", "Cobquecura", "Coelemu", "Coihueco", "Chill√°n Viejo", "El Carmen", "Ninhue", "√ëiqu√©n", "Pemuco", "Pinto", "Portezuelo", "Quill√≥n", "Quirihue", "R√°nquil", "San Carlos", "San Fabi√°n", "San Ignacio", "San Nicol√°s", "Treguaco", "Yungay"],
    "Biob√≠o": ["Concepci√≥n", "Coronel", "Chiguayante", "Florida", "Hualqui", "Lota", "Penco", "San Pedro de la Paz", "Santa Juana", "Talcahuano", "Tom√©", "Hualp√©n", "Lebu", "Arauco", "Ca√±ete", "Contulmo", "Curanilahue", "Los √Ålamos", "Tir√∫a", "Los √Ångeles", "Antuco", "Cabrero", "Laja", "Mulch√©n", "Nacimiento", "Negrete", "Quilaco", "Quilleco", "San Rosendo", "Santa B√°rbara", "Tucapel", "Yumbel", "Alto Biob√≠o"],
    "Araucan√≠a": ["Temuco", "Carahue", "Cunco", "Curarrehue", "Freire", "Galvarino", "Gorbea", "Lautaro", "Loncoche", "Melipeuco", "Nueva Imperial", "Padre las Casas", "Perquenco", "Pitrufqu√©n", "Puc√≥n", "Saavedra", "Teodoro Schmidt", "Tolt√©n", "Vilc√∫n", "Villarrica", "Cholchol", "Angol", "Collipulli", "Curacaut√≠n", "Ercilla", "Lonquimay", "Los Sauces", "Lumaco", "Pur√©n", "Renaico", "Traigu√©n", "Victoria"],
    "Los R√≠os": ["Valdivia", "Corral", "Lanco", "Los Lagos", "M√°fil", "Mariquina", "Paillaco", "Panguipulli", "La Uni√≥n", "Futrono", "Lago Ranco", "R√≠o Bueno"],
    "Los Lagos": ["Puerto Montt", "Calbuco", "Cocham√≥", "Fresia", "Frutillar", "Los Muermos", "Llanquihue", "Maull√≠n", "Puerto Varas", "Castro", "Ancud", "Chonchi", "Curaco de V√©lez", "Dalcahue", "Puqueld√≥n", "Queil√©n", "Quell√≥n", "Quemchi", "Quinchao", "Osorno", "Puerto Octay", "Purranque", "Puyehue", "R√≠o Negro", "San Juan de la Costa", "San Pablo", "Chait√©n", "Futaleuf√∫", "Hualaihu√©", "Palena"],
    "Ays√©n": ["Coihaique", "Lago Verde", "Ays√©n", "Cisnes", "Guaitecas", "Cochrane", "O'Higgins", "Tortel", "Chile Chico", "R√≠o Ib√°√±ez"],
    "Magallanes": ["Punta Arenas", "Laguna Blanca", "R√≠o Verde", "San Gregorio", "Cabo de Hornos", "Ant√°rtica", "Porvenir", "Primavera", "Timaukel", "Natales", "Torres del Paine"]
};

// Funci√≥n para mostrar alertas
function mostrarAlerta(mensaje, tipo) {
    if (typeof Swal === 'undefined') {
        console.error('SweetAlert2 no est√° disponible');
        alert(mensaje);
        return;
    }

    const iconoTipo = tipo === 'success' ? 'success' : 
                     tipo === 'error' ? 'error' :
                     tipo === 'warning' ? 'warning' : 'info';
                     
    const colorBoton = tipo === 'success' ? '#28a745' : 
                      tipo === 'error' ? '#dc3545' :
                      tipo === 'warning' ? '#ffc107' : '#17a2b8';

    Swal.fire({
        title: tipo === 'success' ? '¬°√âxito!' : 
               tipo === 'error' ? 'Error' :
               tipo === 'warning' ? 'Atenci√≥n' : 'Informaci√≥n',
        text: mensaje,
        icon: iconoTipo,
        confirmButtonText: 'Aceptar',
        confirmButtonColor: colorBoton
    });
}

// Funci√≥n para verificar la conexi√≥n con Firestore
async function verificarConexionFirestore() {
    try {
        console.log('üîç Verificando conexi√≥n con Firestore...');
        console.log('üìä Estado de db:', db);
        
        if (!db) {
            console.error('‚ùå db no est√° inicializado');
            return false;
        }

        if (!currentUser) {
            console.error('‚ùå Usuario no autenticado');
            return false;
        }

        // Intentar una operaci√≥n simple en el documento del usuario actual
        const userDocRef = doc(db, 'usuarios', currentUser.uid);
        await getDoc(userDocRef);
        
        console.log('‚úÖ Conexi√≥n con Firestore verificada');
        return true;
    } catch (error) {
        console.error('‚ùå Error al verificar conexi√≥n:', error);
        return false;
    }
}

// Funci√≥n para verificar autenticaci√≥n
function verificarAutenticacion() {
    return new Promise((resolve) => {
        const unsubscribe = onAuthStateChanged(auth, (user) => {
            unsubscribe(); // Dejar de escuchar despu√©s de la primera verificaci√≥n
            if (user) {
                console.log('‚úÖ Usuario autenticado:', user.uid);
                currentUser = user;
                resolve(true);
            } else {
                console.log('‚ùå Usuario no autenticado');
                resolve(false);
            }
        });
    });
}

// Funci√≥n para cargar datos del usuario
async function cargarDatosUsuario(userId) {
    try {
        console.log('üîµ Intentando cargar datos del usuario:', userId);
        
        // Verificar conexi√≥n primero
        const conexionOK = await verificarConexionFirestore();
        if (!conexionOK) {
            console.log('‚ùå No hay conexi√≥n con Firestore');
            throw new Error('No se pudo establecer conexi√≥n con Firestore');
        }
        console.log('‚úÖ Conexi√≥n con Firestore establecida');

        const userDocRef = doc(db, 'usuarios', userId);
        console.log('üìÑ Referencia del documento:', userDocRef.path);
        
        const userDoc = await getDoc(userDocRef);
        console.log('üìã Estado del documento:', {
            existe: userDoc.exists(),
            id: userDoc.id,
            metadata: userDoc.metadata
        });

        if (userDoc.exists()) {
            const datos = userDoc.data();
            console.log('‚úÖ Datos encontrados:', datos);

            // Asegurarse de que el nombre completo est√© actualizado en Auth
            if (datos.nombreCompleto && auth.currentUser) {
                await updateProfile(auth.currentUser, {
                    displayName: datos.nombreCompleto
                });
            }

            return datos;
        } else {
            console.log('‚ö†Ô∏è Documento no existe, creando nuevo usuario');
            const nombreCompleto = auth.currentUser?.displayName || '';
            const nuevoUsuario = {
                nombreCompleto: nombreCompleto,
                email: auth.currentUser?.email || '',
                fechaRegistro: new Date().toISOString(),
                ultimaActualizacion: new Date().toISOString(),
                telefono: '',
                region: '',
                comuna: '',
                direccion: '',
                fotoPerfil: auth.currentUser?.photoURL || ''
            };

            console.log('üìù Datos del nuevo usuario:', nuevoUsuario);

            try {
                await setDoc(userDocRef, nuevoUsuario);
                console.log('‚úÖ Nuevo usuario creado exitosamente');

                // Actualizar el displayName en Auth si es necesario
                if (nombreCompleto && auth.currentUser) {
                    await updateProfile(auth.currentUser, {
                        displayName: nombreCompleto
                    });
                }

                return nuevoUsuario;
            } catch (error) {
                console.error('‚ùå Error al crear usuario:', error);
                console.error('Detalles del error:', {
                    codigo: error.code,
                    mensaje: error.message,
                    nombre: error.name,
                    stack: error.stack
                });
                throw new Error('No se pudo crear el perfil de usuario');
            }
        }
    } catch (error) {
        console.error('‚ùå Error al cargar datos:', error);
        console.error('Detalles del error:', {
            codigo: error.code,
            mensaje: error.message,
            nombre: error.name,
            stack: error.stack
        });
        mostrarAlerta('Error al cargar los datos: ' + error.message, 'error');
        throw error;
    }
}

// Funci√≥n para actualizar la UI
function actualizarUI(userData) {
    console.log('üîµ Actualizando UI con datos:', userData);
    
    try {
        // Actualizar valores de solo lectura primero
        const readOnlyElements = {
            'readOnlyName': userData.nombreCompleto,
            'readOnlyEmail': userData.email,
            'readOnlyPhone': userData.telefono,
            'readOnlyRegion': userData.region,
            'readOnlyComuna': userData.comuna,
            'readOnlyAddress': userData.direccion
        };

        // Actualizar elementos de solo lectura
        Object.entries(readOnlyElements).forEach(([id, value]) => {
            const element = document.getElementById(id);
            if (element) {
                element.textContent = value || '-';
            }
        });

        // Actualizar valores del formulario
        const formElements = {
            'fullName': userData.nombreCompleto,
            'email': userData.email,
            'phone': userData.telefono,
            'region': userData.region,
            'address': userData.direccion
        };

        // Actualizar elementos del formulario
        Object.entries(formElements).forEach(([id, value]) => {
            const element = document.getElementById(id);
            if (element) {
                element.value = value || '';
            }
        });

        // Manejar el tel√©fono espec√≠ficamente
        const phoneInput = document.getElementById('phone');
        if (phoneInput) {
            phoneInput.value = userData.telefono || '';
            // Agregar event listener para formateo de tel√©fono
            phoneInput.addEventListener('input', (e) => formatearTelefono(e.target));
        }

        // Actualizar regi√≥n y comunas
        const regionSelect = document.getElementById('region');
        if (regionSelect) {
            regionSelect.value = userData.region || '';
            if (userData.region) {
                actualizarComunas(userData.region);
                const comunaSelect = document.getElementById('comuna');
                if (comunaSelect) {
                    comunaSelect.value = userData.comuna || '';
                }
            }
        }

        console.log('‚úÖ UI actualizada correctamente');
    } catch (error) {
        console.error('‚ùå Error al actualizar UI:', error);
        mostrarAlerta('Error al actualizar la interfaz', 'error');
    }
}

// Funci√≥n para actualizar las comunas seg√∫n la regi√≥n seleccionada
function actualizarComunas(region) {
    const comunaSelect = document.getElementById('comuna');
    comunaSelect.innerHTML = '<option value="">Selecciona una comuna</option>';
    comunaSelect.disabled = !region;

    if (region && comunasPorRegion[region]) {
        comunasPorRegion[region].forEach(comuna => {
            const option = document.createElement('option');
            option.value = comuna;
            option.textContent = comuna;
            comunaSelect.appendChild(option);
        });
    }
}

// Funci√≥n para manejar el env√≠o del formulario de perfil
async function handleProfileSubmit(event) {
    event.preventDefault();
    
    try {
        if (!currentUser) {
            throw new Error('No hay usuario autenticado');
        }

        const formData = {
            nombreCompleto: document.getElementById('fullName').value.trim(),
            telefono: document.getElementById('phone').value.trim(),
            region: document.getElementById('region').value,
            comuna: document.getElementById('comuna').value,
            direccion: document.getElementById('address').value.trim(),
            ultimaActualizacion: new Date().toISOString()
        };

        // Validar campos requeridos
        if (!formData.nombreCompleto) {
            throw new Error('El nombre completo es requerido');
        }

        if (!formData.region) {
            throw new Error('Por favor, selecciona una regi√≥n');
        }

        if (!formData.comuna) {
            throw new Error('Por favor, selecciona una comuna');
        }

        if (!formData.direccion) {
            throw new Error('La direcci√≥n es requerida');
        }

        // Validar formato de direcci√≥n
        if (!validarDireccion(formData.direccion)) {
            throw new Error('Por favor, ingresa una direcci√≥n v√°lida que incluya calle y n√∫mero');
        }

        // Actualizar en Firestore
        const userDocRef = doc(db, 'usuarios', currentUser.uid);
        await updateDoc(userDocRef, formData);

        // Actualizar displayName en Auth
        await updateProfile(currentUser, {
            displayName: formData.nombreCompleto
        });

        mostrarAlerta('Perfil actualizado correctamente', 'success');
        
        // Recargar datos
        const userData = await cargarDatosUsuario(currentUser.uid);
        actualizarUI(userData);

        // Volver a la vista de solo lectura
        const formulario = document.getElementById('profileForm');
        const vistaReadOnly = document.getElementById('perfilReadOnly');
        const editarPerfilBtn = document.getElementById('editarPerfilBtn');
        
        formulario.classList.add('d-none');
        vistaReadOnly.classList.remove('d-none');
        editarPerfilBtn.innerHTML = '<i class="bi bi-pencil-square me-2"></i>Editar mis datos';
        editarPerfilBtn.classList.replace('btn-danger', 'btn-light');

    } catch (error) {
        console.error('Error al actualizar perfil:', error);
        mostrarAlerta(error.message, 'error');
    }
}

// Funci√≥n para validar el formato de la direcci√≥n
function validarDireccion(direccion) {
    // Verificar longitud m√≠nima
    if (direccion.length < 5) return false;

    // Verificar que contenga n√∫mero
    if (!/\d/.test(direccion)) return false;

    // Verificar que contenga texto (calle)
    if (!/[a-zA-Z]/.test(direccion)) return false;

    return true;
}

// Inicializaci√≥n cuando el DOM est√° listo
document.addEventListener('DOMContentLoaded', async () => {
    console.log('üöÄ Iniciando aplicaci√≥n...');
    
    try {
        // Escuchar cambios en el estado de autenticaci√≥n
        onAuthStateChanged(auth, async (user) => {
            if (user) {
                currentUser = user;
                console.log('‚úÖ Usuario autenticado:', user.uid);
                
                try {
                    // Cargar datos inmediatamente
                    const userData = await cargarDatosUsuario(user.uid);
                    if (userData) {
                        console.log('‚úÖ Datos cargados correctamente');
                        actualizarUI(userData);
                    }
                } catch (error) {
                    console.error('‚ùå Error al cargar datos:', error);
                    mostrarAlerta('Error al cargar el perfil: ' + error.message, 'error');
                }
            } else {
                console.log('üîÑ Redirigiendo a inicio de sesi√≥n...');
                window.location.href = 'iniciar-sesion.html';
            }
        });

        // Configurar event listeners
        configurarEventListeners();

    } catch (error) {
        console.error('‚ùå Error en la inicializaci√≥n:', error);
        mostrarAlerta('Error al iniciar la aplicaci√≥n', 'error');
    }
});

// Funci√≥n para configurar los event listeners
function configurarEventListeners() {
    console.log('üîµ Configurando event listeners');
    
    const phoneInput = document.getElementById('phone');
    if (phoneInput) {
        phoneInput.addEventListener('input', function(e) {
            formatearTelefono(this);
        });
    } else {
        console.warn('‚ö†Ô∏è Elemento phone no encontrado');
    }

    const editarPerfilBtn = document.getElementById('editarPerfilBtn');
    if (editarPerfilBtn) {
        editarPerfilBtn.addEventListener('click', handleEditarPerfil);
    } else {
        console.warn('‚ö†Ô∏è Elemento editarPerfilBtn no encontrado');
    }

    const profileForm = document.getElementById('profileForm');
    if (profileForm) {
        profileForm.addEventListener('submit', handleProfileSubmit);
    } else {
        console.warn('‚ö†Ô∏è Elemento profileForm no encontrado');
    }

    const regionSelect = document.getElementById('region');
    if (regionSelect) {
        regionSelect.addEventListener('change', function() {
            actualizarComunas(this.value);
        });
    } else {
        console.warn('‚ö†Ô∏è Elemento region no encontrado');
    }

    const imageInput = document.getElementById('imageInput');
    if (imageInput) {
        imageInput.addEventListener('change', handleImageChange);
    } else {
        console.warn('‚ö†Ô∏è Elemento imageInput no encontrado');
    }

    const deleteAccountBtn = document.getElementById('deleteAccountBtn');
    if (deleteAccountBtn) {
        deleteAccountBtn.addEventListener('click', handleDeleteAccount);
    } else {
        console.warn('‚ö†Ô∏è Elemento deleteAccountBtn no encontrado');
    }
}

// Funci√≥n para manejar el bot√≥n de editar perfil
function handleEditarPerfil() {
    try {
        const formulario = document.getElementById('profileForm');
        const vistaReadOnly = document.getElementById('perfilReadOnly');
        const editarPerfilBtn = document.getElementById('editarPerfilBtn');
        
        if (!formulario || !vistaReadOnly || !editarPerfilBtn) {
            throw new Error('No se encontraron los elementos necesarios');
        }
        
        if (formulario.classList.contains('d-none')) {
            // Mostrar formulario
            formulario.classList.remove('d-none');
            vistaReadOnly.classList.add('d-none');
            editarPerfilBtn.innerHTML = '<i class="bi bi-x-circle me-2"></i>Cancelar edici√≥n';
            editarPerfilBtn.classList.replace('btn-light', 'btn-danger');
        } else {
            // Ocultar formulario
            formulario.classList.add('d-none');
            vistaReadOnly.classList.remove('d-none');
            editarPerfilBtn.innerHTML = '<i class="bi bi-pencil-square me-2"></i>Editar mis datos';
            editarPerfilBtn.classList.replace('btn-danger', 'btn-light');
            
            // Recargar datos originales
            if (currentUser) {
                cargarDatosUsuario(currentUser.uid)
                    .then(userData => actualizarUI(userData))
                    .catch(error => {
                        console.error('Error al recargar datos:', error);
                        mostrarAlerta('Error al recargar los datos', 'error');
                    });
            }
        }
    } catch (error) {
        console.error('‚ùå Error al manejar edici√≥n:', error);
        mostrarAlerta(error.message, 'error');
    }
}

// Funci√≥n para manejar la subida de im√°genes
async function handleImageChange(e) {
    const file = e.target.files[0];
    if (!file) return;

    try {
        console.log('üì∏ Procesando imagen:', file.name);

        // Validar tipo y tama√±o
        if (!file.type.startsWith('image/')) {
            throw new Error('Por favor, selecciona una imagen v√°lida');
        }
        if (file.size > 5 * 1024 * 1024) {
            throw new Error('La imagen debe ser menor a 5MB');
        }

        // Mostrar progreso
        const uploadProgress = document.querySelector('.upload-progress');
        const progressBar = document.querySelector('.progress-bar');
        const profileImage = document.getElementById('profileImage');

        if (!uploadProgress || !progressBar || !profileImage) {
            throw new Error('No se encontraron los elementos necesarios');
        }

        uploadProgress.style.display = 'block';
        progressBar.style.width = '0%';

        // Crear referencia en Storage
        const imageRef = ref(storage, `fotos-perfil/${currentUser.uid}`);
        console.log('üîÑ Iniciando subida a Storage...');

        // Iniciar subida
        const uploadTask = uploadBytesResumable(imageRef, file);

        uploadTask.on('state_changed',
            // Progreso
            (snapshot) => {
                const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                console.log('üìä Progreso:', progress.toFixed(2) + '%');
                progressBar.style.width = progress + '%';
            },
            // Error
            (error) => {
                console.error('‚ùå Error al subir imagen:', error);
                uploadProgress.style.display = 'none';
                mostrarAlerta('Error al subir la imagen: ' + error.message, 'error');
            },
            // Completado
            async () => {
                try {
                    console.log('‚úÖ Imagen subida correctamente');
                    const downloadURL = await getDownloadURL(imageRef);

                    // Actualizar foto en Auth
                    console.log('üîÑ Actualizando perfil en Auth...');
                    await updateProfile(currentUser, {
                        photoURL: downloadURL
                    });

                    // Actualizar en Firestore
                    console.log('üíæ Actualizando en Firestore...');
                    const userDocRef = doc(db, 'usuarios', currentUser.uid);
                    await updateDoc(userDocRef, {
                        fotoPerfil: downloadURL,
                        fechaActualizacionFoto: new Date().toISOString()
                    });

                    // Actualizar UI
                    profileImage.src = downloadURL;
                    console.log('‚úÖ Foto de perfil actualizada');
                    mostrarAlerta('¬°Foto de perfil actualizada exitosamente!', 'success');
                } catch (error) {
                    console.error('‚ùå Error al finalizar actualizaci√≥n:', error);
                    mostrarAlerta('Error al actualizar la foto: ' + error.message, 'error');
                } finally {
                    uploadProgress.style.display = 'none';
                }
            }
        );
    } catch (error) {
        console.error('‚ùå Error:', error);
        mostrarAlerta(error.message, 'error');
    }
}

// Funci√≥n para manejar el olvido de contrase√±a
async function handleForgotPassword() {
    try {
        if (!currentUser) {
            throw new Error('No hay usuario autenticado');
        }

        const result = await Swal.fire({
            title: 'Restablecer Contrase√±a',
            text: 'Se enviar√° un correo a tu direcci√≥n de email para restablecer tu contrase√±a',
            icon: 'info',
            showCancelButton: true,
            confirmButtonColor: '#ffc107',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'Enviar correo',
            cancelButtonText: 'Cancelar'
        });

        if (result.isConfirmed) {
            await sendPasswordResetEmail(auth, currentUser.email);
            mostrarAlerta('Se ha enviado un correo para restablecer tu contrase√±a', 'success');
        }
    } catch (error) {
        console.error('Error al enviar correo de restablecimiento:', error);
        mostrarAlerta('Error al enviar el correo. Por favor, intenta m√°s tarde.', 'error');
    }
}

// Funci√≥n para manejar la eliminaci√≥n de cuenta
async function handleDeleteAccount() {
    try {
        const result = await Swal.fire({
            title: '¬øEst√°s seguro?',
            text: 'Esta acci√≥n eliminar√° permanentemente tu cuenta y todos tus datos. Esta acci√≥n no se puede deshacer.',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#dc3545',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'S√≠, eliminar cuenta',
            cancelButtonText: 'Cancelar'
        });

        if (result.isConfirmed) {
            // Solicitar contrase√±a para reautenticar
            const { value: password } = await Swal.fire({
                title: 'Confirma tu contrase√±a',
                input: 'password',
                inputLabel: 'Por seguridad, ingresa tu contrase√±a actual',
                inputPlaceholder: 'Contrase√±a',
                showCancelButton: true,
                confirmButtonText: 'Confirmar',
                cancelButtonText: 'Cancelar',
                inputValidator: (value) => {
                    if (!value) {
                        return 'Por favor, ingresa tu contrase√±a';
                    }
                }
            });

            if (password) {
                const user = auth.currentUser;
                const credential = EmailAuthProvider.credential(user.email, password);

                // Reautenticar usuario
                await reauthenticateWithCredential(user, credential);

                // Eliminar datos del usuario en Firestore
                await deleteDoc(doc(db, 'usuarios', user.uid));

                // Eliminar usuario de Authentication
                await deleteUser(user);

                await Swal.fire(
                    '¬°Cuenta eliminada!',
                    'Tu cuenta ha sido eliminada exitosamente.',
                    'success'
                );

                // Redirigir al inicio
                window.location.href = 'index.html';
            }
        }
    } catch (error) {
        console.error('Error al eliminar cuenta:', error);
        let mensajeError = 'Hubo un error al eliminar la cuenta.';
        
        if (error.code === 'auth/wrong-password') {
            mensajeError = 'La contrase√±a ingresada es incorrecta.';
        }
        
        mostrarAlerta(mensajeError, 'error');
    }
}

// Funci√≥n para formatear tel√©fono
function formatearTelefono(input) {
    let telefono = input.value.replace(/\D/g, '');
    if (telefono.length > 0) {
        if (telefono.length <= 3) {
            telefono = `+${telefono}`;
        } else if (telefono.length <= 6) {
            telefono = `+${telefono.slice(0,3)} ${telefono.slice(3)}`;
        } else {
            telefono = `+${telefono.slice(0,3)} ${telefono.slice(3,6)} ${telefono.slice(6,10)}`;
        }
        input.value = telefono;
    }
} 